#summary NIH introductory page.

= Introduction =

*nih* is a simple library for performing _all kinds of basic graphics stuff_
efficiently that the author wouldn't want *not* to be *invented here* - and that will necessarily be such for anybody else but him. ;)
Truth is, this tiny little name just sounded good as a short, easy namespace.

Besides simple classes for manipulating small objects from linear algebra and
monte carlo and quasi-monte carlo sampling, it contains fast algorithms
for point cloud manipulation, hierarchy building and stuff like that.

As a library, it's supposed to be highly modular: one can simply include
a subset of its modules in its own project and everything should work
just as well (as long as dependencies are respected).

check out the
[http://slash-sandbox.googlecode.com/svn/trunk/%20slash-sandbox/nih/docs/html/modules.html Doxygen documentation]

== External Dependencies ==

 * CUDA 4.1
 * Thrust
 * [http://code.google.com/p/back40computing back40computing]

== k-d Trees ==

The library offers primitives for fast k-d tree creation over point sets,
based on a Morton code construction similar to the one used in LBVH.<br>
The following table reports sorting rates (in milliseconds) for sets of random
3-d points of different sizes:

http://slash-sandbox.googlecode.com/svn/trunk/%20slash-sandbox/nih/images/kd-chart.jpg

== Bounding Volume Hierarchies == 

The library supports several BVH builders:

=== LBVH ===

Linear Bounding Volume Hierarchies are a kind of BVHs built sorting points
over the Morton space-filling curve, and using middle spatial splits to
separate them into clusters.
The resulting hierarchies are not always very tight, but this is probably the fastest known method for building BVHs.
The implementation offered by *nih* is based on the algorithms described in:<br>
http://research.nvidia.com/publication/simpler-and-faster-hlbvh-work-queues

The following table reports sorting rates (in milliseconds) for sets of random
3-d points of different sizes:

http://slash-sandbox.googlecode.com/svn/trunk/%20slash-sandbox/nih/images/lbvh-chart.jpg

=== Greedy Surface Area Heuristic Builder === 

The library offers a novel massively parallel implementation of the standard
full SAH-based BVH construction technique - a method that creates very high
quality trees by carefully clustering primitives so as to minimize their surface
area.

=== Binned Surface Area Heuristic Builder === 

This is a middle-quality BVH builder, using the binned SAH algorithm
described in:<br>
http://research.nvidia.com/publication/simpler-and-faster-hlbvh-work-queues